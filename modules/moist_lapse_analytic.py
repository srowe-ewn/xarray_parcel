# moist_lapse_analytic.py
#
# Functions to analytically determine moist pseudoadiabats using iteration through vertical levels.
# Testing on these functions is incomplete and initial testing indicates they introduce drift
# so that when lifting a parcel from the surface, the temperatures at the top of the atmosphere
# are not accurate.
#
# Tim Raupach <t.raupach@unsw.edu.au>.

def moist_lapse_rate(pressure, temperature):
    """
    Return the moist lapse rate in K hPa-1.
    
    Arguments:
        pressure: Air pressure [hPa].
        temperature: Air temperature [K].
    """
         
    if not isinstance(pressure, xarray.DataArray):
        p = pressure * units.hPa
    else:
        p = pressure
            
    rs = metpy.calc.saturation_mixing_ratio(total_press=p, 
                                            temperature=temperature).metpy.dequantify()
    
    frac = ((mpconsts.Rd.m * temperature + mpconsts.Lv.m * rs)
            / (mpconsts.Cp_d.m + (mpconsts.Lv.m**2 * rs * mpconsts.epsilon.m
                                / (mpconsts.Rd.m * temperature**2))))
    return (frac / pressure)

def moist_lift_parcel(parcel_pressure, parcel_temperature, to_pressure, step=1):
    """
    Recursively determine the temperature of a parcel lifted from one pressure to 
    another, assuming moist pseudoadiabatic processes.
    
    Arguments:
        parcel_pressure: The starting parcel pressure.
        parcel_temperature: The starting parcel temperature.
        to_pressure: The pressure to lift to.
        
    Returns: The temperature of the lifted parcel.
    """

    pressure_diff = to_pressure - parcel_pressure
    
    if np.all(pressure_diff == 0):
        # No pressure differences; nothing to do.
        return parcel_temperature
    
    # Otherwise, push the parcels by 'step' hPa towards the required pressure.
    pressure_diff = pressure_diff.where(np.abs(pressure_diff) < step,
                                        other=step * np.sign(pressure_diff))
   
    lapse_rate = moist_lapse_rate(pressure=parcel_pressure, 
                                  temperature=parcel_temperature)
    new_temperature = parcel_temperature + (pressure_diff * lapse_rate)
    new_temperature.attrs['units'] = 'K'
    
    new_pressure = parcel_pressure + pressure_diff
    new_pressure.attrs['units'] = 'hPa'
    
    return moist_lift_parcel(parcel_pressure=new_pressure,
                             parcel_temperature=new_temperature,
                             to_pressure=to_pressure)

def moist_lapse_analytic(pressure, parcel_temperature, moist_adiabat_lookup, moist_adiabats,
                         parcel_pressure=None, vert_dim='model_level_number', ):
    """
    Return the temperature of parcels raised moist-adiabatically (assuming liquid saturation 
    processes). What is returned are approximate pseudo-adiabatic moist lapse rates.
    
    NOTE: This function is slow because it involves a lot of iteration; it has not been
    properly tested to ensure it gives results close to metpy's moist_lapse function.
    
    Arguments:
        pressure: Atmospheric pressure(s) to lift the parcel to [hPa].
        parcel_temperature: Temperature(s) of parcels to lift [K].
        moist_adiabat_lookup, moist_adiabats: Adiabat lookup tables generated by moist_adiabat_tables().
        parcel_pressure: Parcel pressure before lifting. Defaults to vertical maximum.
        vert_dim: The name of the vertical dimension.
        moist_adiabat_lookup, moist_adiabats: Included for compatability; ignored.

    Returns: Parcel temperature at each pressure level. 
    """
   
    if parcel_pressure is None:
            parcel_pressure = pressure.max(vert_dim, keep_attrs=True)

    # Lift the parcel from the reference pressure to the first level. 
    out = xarray.full_like(pressure, np.nan)
    out.attrs['long_name'] = 'Temperature'
    out.attrs['units'] = 'K'

    first_level = pressure[vert_dim][0]
    out.loc[{vert_dim: first_level}] = (
        moist_lift_parcel(parcel_pressure=parcel_pressure,
                          parcel_temperature=parcel_temperature,
                          to_pressure=pressure.sel({vert_dim: first_level})))

    # Lift the parcel across all levels.
    for i, level in enumerate(pressure[vert_dim].values[1:None]):
        prev_level = pressure[vert_dim].values[i]
        out.loc[{vert_dim: level}] = (
            moist_lift_parcel(parcel_pressure=pressure.sel({vert_dim: prev_level}), 
                              parcel_temperature=out.sel({vert_dim: prev_level}),
                              to_pressure=pressure.sel({vert_dim: level})))

    return out